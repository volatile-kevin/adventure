BUG 1: draw vert line
    addr = img3 + show_y * SCROLL_X_WIDTH + x;

    p_off = (3 - (show_x & 3));

    for(i = 0; i < SCROLL_Y_DIM; i++){
      addr[p_off * SCROLL_SIZE] = buf[i];
      addr += SCROLL_X_WIDTH;
    }

	This code for draw_vert_line is drawing individual lines for every 4th pixel scrolled across the entire screen

	HOW LONG? 1 hr
	WHY? x was not divided by 4 which is necessary as there are 4 total planes
	FIX: starting address (addr) changed to = img3 + show_y * SCROLL_X_WIDTH + (x >> 2)

BUG 2: text to graphics

	either a line, block, or garbage colors were printed to status bar

	HOW LONG? 3 hrs

	WHY? && vs &, indexing was off, show status bar function did not use correct offset or planes


BUG 3: showing status message

	typing "get" right after start prints correct status, but after the first status message, no matter what is typed, "What are you babbling about?" is always shown

	HOW LONG? 30 min

	FIX: must backspace after commands, game design, not actual bug i guess?

BUG 4: showing status message flickers for 1 frame instead of 1.5 seconds

	HOW LONG? 1 hour

	FIX: added my show_statusBar function within given file show_status (inside of locks), as well as inside the game loop

BUG 5: After going past max number of characters typed on screen, garbage replaces that string, only on Alma location

	HOW LONG? 2 hours

	FIX: added null chars at the end of EVERY string that will be concatenated to the final string.

BUG 6: Can't scroll all the way down on images

	HOW LONG? 30 min

	FIX: changed image size in copy_image to 16000 - 1440, changed SCROLL_Y_DIM from 200 to 182 to account for the resizing needed for status bar
	
CHECKPOINT2:

BUG 4: qsort not working correctly, items are not it ascending order by frequency

	HOW LONG? 3 hours

	FIX: declared all struct data as uint8_t, so numbers were getting maxed at 255. Fixed by changing struct data to ints

BUG 5: "floating point exception"

	HOW LONG? 30 mins

	FIX: was dividing by 0 when finding average values. Included an if statement to do nothing if frequency was 0

BUG 6: not coloring correctly: colors on photo remain unchanged after writing to palette with octree data

	HOW LONG? 1 day

	FIX: never actually saved indices to perserve image pixel data

BUG 7: PANIC-- can't build world

	HOW LONG? 2 hours	

	FIX: fseek(in, 0, 0), retarget the image pointer to start at 0

BUG 8: octree algorithm just colors with black or random garbage values

	HOW LONG? 3 days

	FIX: uint8_t was the type of p->img. I made a copy of this to save the 4:4:4 rgb, hence only taking in the G and B values.

BUG 9: TUX can't print LEDs correctly, they never clear

	HOW LONG? 5 hours

	FIX: from piazza: " have seen a lot of people who got the opposite impression from the documentation, so I want to make this absolutely clear.

	If an LED's bitmask in MTCP_LED_SET is 0, that LED should be BLANKED OUT, NOT SKIPPED. 
	Many people including me had the impression that if an LED's bitmask in MTCP_LED_SET is 0, that LED shouldkeep its previous state. 
	This is incorrect, it should be completely blanked out.

BUG 10: Segmentation fault when entering a room that needs an icard or bunnysuit

	HOW LONG? 